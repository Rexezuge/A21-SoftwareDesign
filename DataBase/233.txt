==2843== Memcheck, a memory error detector
==2843== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==2843== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==2843== Command: ./ecdb
==2843== 
==2843== error calling PR_SET_PTRACER, vgdb might block
==2843== Conditional jump or move depends on uninitialised value(s)
==2843==    at 0x1522E3: void std::_Destroy_aux<false>::__destroy<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*>(std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*) (stl_construct.h:107)
==2843==    by 0x14D7DD: void std::_Destroy<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*>(std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*) (stl_construct.h:137)
==2843==    by 0x148D18: void std::_Destroy<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > >(std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > >&) (stl_construct.h:206)
==2843==    by 0x14611A: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::~vector() (stl_vector.h:434)
==2843==    by 0x14CC93: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::_M_move_assign(std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >&&, std::integral_constant<bool, true>) (stl_vector.h:1536)
==2843==    by 0x147FEE: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::operator=(std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >&&) (stl_vector.h:466)
==2843==    by 0x1454F8: ContactWithGroup::operator=(ContactWithGroup&&) (ContactWithGroup.h:8)
==2843==    by 0x13DA14: main (DB_Main.cpp:79)
==2843== 
==2843== Conditional jump or move depends on uninitialised value(s)
==2843==    at 0x14D79F: std::_Vector_base<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::_M_deallocate(std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >*, unsigned long) (stl_vector.h:179)
==2843==    by 0x148CD4: std::_Vector_base<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::~_Vector_base() (stl_vector.h:162)
==2843==    by 0x146126: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::~vector() (stl_vector.h:435)
==2843==    by 0x14CC93: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::_M_move_assign(std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >&&, std::integral_constant<bool, true>) (stl_vector.h:1536)
==2843==    by 0x147FEE: std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >::operator=(std::vector<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> >, std::allocator<std::unique_ptr<ContactNOGroup, std::default_delete<ContactNOGroup> > > >&&) (stl_vector.h:466)
==2843==    by 0x1454F8: ContactWithGroup::operator=(ContactWithGroup&&) (ContactWithGroup.h:8)
==2843==    by 0x13DA14: main (DB_Main.cpp:79)
==2843== 
==2843== Use of uninitialised value of size 8
==2843==    at 0x530EFC0: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==2843==    by 0x145513: ContactWithGroup::operator=(ContactWithGroup&&) (ContactWithGroup.h:8)
==2843==    by 0x13DA14: main (DB_Main.cpp:79)
==2843== 
==2843== Invalid write of size 1
==2843==    at 0x530EFC0: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==2843==    by 0x145513: ContactWithGroup::operator=(ContactWithGroup&&) (ContactWithGroup.h:8)
==2843==    by 0x13DA14: main (DB_Main.cpp:79)
==2843==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==2843== 
==2843== 
==2843== Process terminating with default action of signal 11 (SIGSEGV)
==2843==  Access not within mapped region at address 0x0
==2843==    at 0x530EFC0: std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >::operator=(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >&&) (in /usr/lib/x86_64-linux-gnu/libstdc++.so.6.0.25)
==2843==    by 0x145513: ContactWithGroup::operator=(ContactWithGroup&&) (ContactWithGroup.h:8)
==2843==    by 0x13DA14: main (DB_Main.cpp:79)
==2843==  If you believe this happened as a result of a stack
==2843==  overflow in your program's main thread (unlikely but
==2843==  possible), you can try to increase the size of the
==2843==  main thread stack using the --main-stacksize= flag.
==2843==  The main thread stack size used in this run was 8388608.
==2843== 
==2843== HEAP SUMMARY:
==2843==     in use at exit: 1,644 bytes in 20 blocks
==2843==   total heap usage: 98 allocs, 78 frees, 84,921 bytes allocated
==2843== 
==2843== LEAK SUMMARY:
==2843==    definitely lost: 0 bytes in 0 blocks
==2843==    indirectly lost: 0 bytes in 0 blocks
==2843==      possibly lost: 0 bytes in 0 blocks
==2843==    still reachable: 1,644 bytes in 20 blocks
==2843==         suppressed: 0 bytes in 0 blocks
==2843== Rerun with --leak-check=full to see details of leaked memory
==2843== 
==2843== For counts of detected and suppressed errors, rerun with: -v
==2843== Use --track-origins=yes to see where uninitialised values come from
==2843== ERROR SUMMARY: 4 errors from 4 contexts (suppressed: 0 from 0)
